====== RIGHT : R Interactive Graphics via HTml ======

**Summary:** R Interactive Graphics via HTml (RIGHT) supports easy data exploration using interactive graphics and analysis and reveal information hidden among static graphs. It uses HTML5 canvas and JavaScript, instead of Qt, to make analysis and visualization results easier to distribute to wider audience. Furthermore, it will support intuitive R API for easy setup.

**Background/Motivation:** There are excellent packages in R that produces very polished static graphics, e.g. lattice and ggplot2. However, exploring data using static graphics can be tedious: users have to frequently interact with command line to get meaningful graphs that answer even a simple question like “how are graphical elements (a point or a group of points) in one graph related to those in another graph?” Interactive graphics linking data in different graphs and interactive visualization of summary statistics, combined with intuitive R API for setup, can help address these questions and make data exploration easy and also fun. 

**Description/Goal**

In GSOC 2013, the RIGHT project was successfully passed and released the first version. However, there are still some parts needed to be improved remained to capture a wide range of users’ interests. Therefore, this project proposes the enhancement of two big parts: (a) improving the R API such as ggplot2 like syntax to support user-friendly environment and refactoring the JavaScript code to make RIGHT handle the large amount of data (e.g. 50K); (b) Adding server offload functionality using Shiny to enable both client- and server-side interactivity.

  - **Improving the R API & Refactoring the JavaScript code**
    * **Moving low-level statistical process from JavaScript side to R side:** Calculating data in R side is very efficient, so moving calculation of data used to draw graphs from JavaScript side to R side will accelerate the performance of RIGHT. JavaScript side will have only drawing functionalities using the middle-data Object from R side. Data transfer methods (e.g. JSON) between JavaScript and R should be needed.
    * **Restructuring R API to support user-friendly environment:** the latest version of RIGHT API is similar to base-graphics API whose system is not intuitive for supporting various condition values to make creating interactive graphs various. Therefore, the state-of-the-art API system, such as ggplot2 would be a good model for making the R API intuitive.
  - **Adding server offload functionality using Shiny to enable both client- and server-side interactivity**


**Demo:** A demo video is available at [[http://youtube.googleapis.com/v/thlwjYFC_yY?vq=hd1080;hd=1;autoplay=1;]].

**Code** https://code.google.com/p/r-interactive-graphics-via-html/

**Related work/Literature**
  * [[http://spotfire.tibco.com/|TIBCO Spotfire]]: [[http://www.youtube.com/user/SpotfireGuy|many interactive visualization features]] were inspired by this commercial software package. RIGHT will be open source and provide an intuitive R API for setup; in comparison, Spotfire setup is only supports GUI-based setup.
  * [[https://github.com/ggobi/cranvas|cranvas]]: this is an excellent package that produces interactive visualization using Qt. Visualization using Qt has limited availability in mobile platforms (see [[http://doc.qt.digia.com/4.7/supported-platforms.html|Qt Supported Platforms]]). A package based on HTML5 canvas and JavaScript with similar functionality will give users more options when analysis and visualization results need to be widely distributed.
  * [[http://www.omegahat.org/SVGAnnotation/|SVGAnnotation]], [[http://sjp.co.nz/projects/gridsvg/|gridSVG]], [[http://svgmapping.r-forge.r-project.org/SVG_Mapping/Home.html|SVGMapping]], and [[https://github.com/hadley/r2d3|r2d3]]: SVG-based packages can provide polished visualization [[http://d3js.org/]], but the DOM-based approach makes it difficult to provide some types of interactivity. For instance, the many-to-one simultaneous selection between the scatter plot and the histogram shown in the [[http://youtube.googleapis.com/v/thlwjYFC_yY?vq=hd1080;hd=1;autoplay=1;|demo]] will be difficult to create with SVG, especially among more than two graphs. 
  * [[http://www.rforge.net/canvas/|canvas]]: canvas package uses HTML5 canvas but does not support interactivity.
  * [[http://www.rstudio.com/shiny/|RStudio Shiny]]: Shiny does not offer interactive visualization. However, server offloading idea came from Shiny Server.

**Skills required:** R, JavaScript, and HTML5

**Tests**
  - Load Theoph dataset and plot concentration (conc) versus time (Time) by subject (Subject) with at least two graphics packages in R. Points for each subject should have different colors, and a legend should be added.
  - Re-draw the plot created in problem 1 with JavaScript using the kineticJS library (http://kineticjs.com/).

**Mentors:** [[http://icc.skku.ac.kr/~jaewlee|Jae W. Lee]] <jaewlee@gmail.com>, Jung Hoon Lee <flammy@gmail.com>, Chung Ha Sung <sch8906@gmail.com>