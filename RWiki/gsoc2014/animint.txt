**Background/Related work:** standard R graphics are based on the pen and paper model, which makes animations and interactivity difficult to accomplish. Non-interactive animations can be accomplished with the ''animation'' package, and some interactions with non-animated plots can be done with the [[https://github.com/ggobi/cranvas/wiki|qtbase, qtpaint, and cranvas packages]]. Linked plots in the web are possible using [[http://www.omegahat.org/SVGAnnotation/SVGAnnotationPaper/SVGAnnotationPaper.html|SVGAnnotation]] or [[http://sjp.co.nz/projects/gridsvg/|gridSVG]], but using these to create such a visualization requires knowledge of Javascript. The [[https://r-forge.r-project.org/scm/viewvc.php/pkg/?root=svgmaps|svgmaps]] package defines interactivity (hrefs, tooltips) in R code using igeoms, and exports SVG plots using gridSVG. [[https://github.com/trifacta/vega|Vega]] can be used for describing plots in Javascript, but has limited interactivity.

The [[https://github.com/tdhock/animint|animint]] package supports clicking linked plots to show/hide subsets of data, by adding 2 new aesthetics to the grammar of graphics:
  * ''showSelected=variable'' means that only the subset of the data that corresponds to the selected value of ''variable'' will be shown.
  * ''clickSelects=variable'' means that clicking a plot element will change the currently selected value of ''variable''.
The animint package user writes only R code: a list ''L'' of ggplots, then calls ''gg2animint(L)'' which renders the interactive, animated plots in a web browser.

Behind the scenes, the animint package developers have written R and Javascript code that does all the work. The [[https://github.com/tdhock/animint/blob/master/R/animint.R|R]] code exports all the plot data in CSV along with a ''plots.json'' metadata file. These files are then plotted in a web browser using [[https://github.com/tdhock/animint/blob/master/inst/htmljs/animint.js|Javascript code]] and the [[http://d3js.org|D3]] library. [[http://sugiyama-www.cs.titech.ac.jp/~toby/animint/|The result is several linked, interactive, animated web plots]].

**Proposal:** implement several improvements to the ''animint'' package. A [[https://github.com/tdhock/animint/blob/master/NEWS|list of TODOs can be found in the NEWS file]]. The most important improvements are:
  * [[http://docs.ggplot2.org/current/coord_fixed.html|coord_equal]] which would be useful for e.g. [[http://tdhock.github.io/animint/tornadoes.html|maps]].
  * [[http://docs.ggplot2.org/0.9.3.1/facet_grid.html|facet_grid]] which would be useful for e.g. [[https://github.com/tdhock/animint/blob/master/examples/intreg.R|the last plot in this file]].
  * Increase memory/disk/speed efficiency by e.g. saving compressed .csv.gz files rather than uncompressed .csv files.
  * Make tests for the SVG that is generated by the Javascript code, using e.g. [[http://phantomjs.org/|PhantomJS]] to non-interactively render the web page. One test that could be implemented is e.g. checking for at least one ''<text font-size="10">'' and one ''<text font-size="20">'' when you specify ''geom_text(aes(size=variable))+scale_size_continuous(range=c(10, 20))'' [[https://github.com/tdhock/animint/blob/master/examples/text_size.R|as in this example]].
  * To make it easier to share interactive animations with colleagues or the public, implement a ''animint2gist(L)'' function that uploads the interactive animation to github as a gist.
  * Improve [[https://github.com/tdhock/animint/blob/master/R/knitr.R|knitr support]] so that several interactive animations can be easily included in an R markdown (Rmd) document. Currently it only supports including one interactive animation per document, [[https://github.com/tdhock/animint/blob/master/inst/doc/template.Rmd|as in this Rmd]] which is used to [[https://github.com/tdhock/animint/blob/master/R/doc.R|generate the examples web site]].  

**Mentors:** [[https://github.com/tdhock|Toby Dylan Hocking]] <tdhock5@gmail.com>, [[https://github.com/srvanderplas|Susan VanderPlas]] <srvanderplas@gmail.com>.

**Tests: do one or several --- doing more hard tests makes you more likely to be selected** 
  * Easy: to demonstrate some knowledge of animint, use it to visualize some of the data from your domain of expertise.
  * Medium: translate one or several [[http://vis.supstat.com/categories.html#animation-ref|examples of the animation package]] into an animint.
    * look at source code of one of the animation package functions e.g. grad.desc() for a demonstration of the gradient descent algorithm. Translate the for loops and plot() calls into code that generates data.frames. In the grad.desc() example, there should be one data.frame for the contour lines, one for the arrows, and one for the values of the objective/gradient at each iteration.
    * Use the data.frames to make some ggplots. In the grad.desc() example, there should be one ggplot with a geom_contour and a geom_path, and another ggplot with a geom_line that shows objective or gradient value versus iteration, and a make_tallrect in the background for selecting the iteration number.
    * Make a list of ggplots and pass that to gg2animint. For the grad.desc() example the plot list should be something like list(contour=ggplot(), objective=ggplot(), time=list(variable="iteration", ms=2000)).
  * Hard: fork the animint source code on github, then implement one of the improvements mentioned in the Proposal section, and send tdhock a pull request.